/* @flow */
import React from 'react';

import BaseComponent3 from './BaseComponent3';
import Store from './Store';

type PropsType = {|
    id: string
|};

type ItemType = {
    name: string,
    age: string,
};

type StateType = {|
    model: ItemType | null,
|};

class AppItem3 extends BaseComponent3 {

    props: PropsType;
    state: StateType;

    constructor(props: PropsType) {
        super(props);

        this.state = {
            model: null
        };

        this.onProps((propsStream: rxjs$Observable<PropsType>): rxjs$Subscription =>
            propsStream
                .map(props => props.id)
                .distinctUntilChanged()
                .switchMap(id => Store.getUser(id))
                .subscribe((nextModel) => this.setState({ model: nextModel }))
        );
    }

    render() {
        const { id } = this.props;
        const { model } = this.state;

        console.info(`RENDER ITEM: ${id}`);

        if (model) {
            return (
                <div>
                    <span>name: {model.name}</span> &nbsp;&nbsp;
                    <span>age: {model.age}</span> &nbsp;&nbsp;
                    <span style={{cursor: 'pointer'}} onClick={this._refresh.bind(this)}>Refresh</span>
                </div>
            );
        }

        return (
            <div> {'loading ' + id} </div>
        );
    }

    _refresh() {
        const { id } = this.props;
        Store.refresh(id);
    }
}

export default AppItem3;
