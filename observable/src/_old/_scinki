
/*
    const action$ = new Rx.Subject();

    const addNew = () => {
        console.warn('ADD NEW2');
        action$.next();
    };

    const initValue = ['0','1','2','3','4'];

    const reducer = (state: Array<string>, action: void): Array<string> => {
        console.warn('redukcja', state);
        const newId = state.length.toString();
        return state.concat([newId]);
    };

    const store$ = action$
        .scan(reducer, initValue)             //scan oraz startWith - nowa maszynka stanu + natychmiastowa emisja początkowego stanu
        .startWith(initValue)
        .map((list) => {
            return {
                list: list,
                addNew: addNew
            };
        });

    return store$;
*/
/*
    return Rx.Observable.of({
        list: ['0','1','2','3','4'],
        addNew: () => {
            console.warn('ADD NEW');
        }
    });
*/


/*
    props: {};
    state: StateType;

    input$: rxjs$Subject<string>;

    constructor(props: {}) {
        super(props);

        const storeApi = new StoreApi();

        this.input$ = new Rx.Subject();
        this.state = {
            list: []
        };

        this.input$.subscribe(mess => console.warn('kliknięto ' + mess));

        this.input$
            .debounceTime(1000)
            .switchMap(text => storeApi.getListByText(text))
            .subscribe(list => {
                console.warn('otrzymano nową listę: ', list);
                this.setState({ list });
            });
    }

    _onChange(e: Object) {
        this.input$.next(e.target.value);
    }
*/
s
