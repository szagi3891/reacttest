var subject = new Rx.ReplaySubject(1);      //bufor na jedną wartość z przeszłości

var subject = new Rx.ReplaySubject(2, 1000);
            przechowuje dwie ostatnie wartości z przeszłości
            pod warunkiem że nie są one starsze niż 1s
            
            

var subject = new Rx.AsyncSubject();


/*
    ----1---2---3--|
    ...............3|           subskrybent1
                        3|      subskrybent2
*/

zapamiętuje wynik, zwraca ostatnią wartość ze strumienia jeśli tej jest zakończony
    lekkie podobieństwo do Promise
    
    


/*
    var share = Rx.Observable.interval(1000)
    .do(x => console.log(x))
    .multicast(new Rx.Subject())
    .refCount();
    
                    odpowiednik
    .publish()
    .refCount();
    
    const unsub1 = share.subscribe((value) => ...)
    const unsub2 = share.subscribe((value) => ...)
    
    .multicast(new ReplaySubject(1))
    odpowiednik
    .publishReplay(1)
    
    publishBehavior(0)

    publishLast = multicast + AsyncSubject
    
    .share = multicast + Subject
    
    multicast
        na tym operatorze ręcznie uruchamiamy metodę connect
        odsubskrybujemy też raz
*/




inne
redux saga
http://www.robinwieruch.de/redux-observable-rxjs/


